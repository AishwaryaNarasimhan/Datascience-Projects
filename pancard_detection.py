# -*- coding: utf-8 -*-
"""Pancard Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZIn9WvOa0yTC1VLCNVhNA0n-ikhDVL5B

The Pan card Tampering Detection using OpenCV 
This Project will help organisation whether person is giving the Real card or not

Library Importing
"""

from skimage.metrics import structural_similarity
import imutils
import cv2
from PIL import Image
import requests

"""Creating Directory in Google colab 

"""

!mkdir pan_card_tampering
!mkdir pan_card_tampering/image

"""Opening the Images in URL using Requst and Image function"""

original = Image.open(requests.get('https://www.thestatesman.com/wp-content/uploads/2019/07/pan-card.jpg', stream=True).raw)
tampered = Image.open(requests.get('https://assets1.cleartax-cdn.com/s/img/20170526124335/Pan4.png', stream=True).raw)

"""Format and Size of the images"""

print("Original image format : ",original.format) 
print("Tampered image format : ",tampered.format)

print("Original image size : ",original.size) 
print("Tampered image size : ",tampered.size)

"""Resizing the Pics and saving the Pics in Directory"""

original = original.resize((250, 160))
print(original.size)
original.save('pan_card_tampering/image/original.png')#Save image
tampered = tampered.resize((250,160))
print(tampered.size)
tampered.save('pan_card_tampering/image/tampered.png')#Saves image

original

tampered

"""Reading using CV2"""

original = cv2.imread('pan_card_tampering/image/original.png')
tampered = cv2.imread('pan_card_tampering/image/tampered.png')

"""Converting to Gray Scale"""

original_gray = cv2.cvtColor(original, cv2.COLOR_BGR2GRAY)
tampered_gray = cv2.cvtColor(tampered, cv2.COLOR_BGR2GRAY)

"""Comparing the structural similarity between original and tempared"""

(score, diff) = structural_similarity(original_gray, tampered_gray, full=True)
diff = (diff * 255).astype("uint8")
print("SSIM: {}".format(score))

"""Finding the Threshold and contour"""

thresh=cv2.threshold(diff,0,255,cv2.THRESH_BINARY_INV|cv2.THRESH_OTSU)[1]
cont=cv2.findContours(thresh.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
cont=imutils.grab_contours(cont)

"""looping in contour making Rectangle"""

# loop over the contours
for c in cont:
    # applying contours on image
    (x, y, w, h) = cv2.boundingRect(c)
    cv2.rectangle(original, (x, y), (x + w, y + h), (0, 0, 255), 2)
    cv2.rectangle(tampered, (x, y), (x + w, y + h), (0, 0, 255), 2)

#Diplay original image with contour
print('Original Format Image')
Image.fromarray(original)

print('Tampered Format Image')
Image.fromarray(tampered)

print('Different Image')
Image.fromarray(diff)

print('Threshold Image')
Image.fromarray(thresh)

"""This project can be used in different organizations where customers or users need to provide any kind of id in order to get themselves verified. The organization can use this project to find out whether the ID is original or fake. Similarly this can be used for any type of ID like adhar, voter id, etc."""